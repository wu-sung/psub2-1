#include "psub2-1/pub.hpp"
Pub::Pub() : Node("mypub"), count_(0)
{
auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
pub_ = this->create_publisher<std_msgs::msg::#include "psub2/pub.hpp"
Pub::Pub() : Node("mypub"), count_(0)
{
auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
pub_ = this->create_publisher<std_msgs::msg::String>("mytopic", qos_profile);
timer_ = this->create_wall_timer(1s, std::bind(&Pub::publish_msg, this));
}
void Pub::publish_msg()
{
auto msg = std_msgs::msg::String();
msg.data = "Hello World: " + std::to_string(count_++);
RCLCPP_INFO(this->get_logger(), "Published message: '%s'", msg.data.c_str());
pub_->publish(msg);
}
>("mytopic", qos_profile);
timer_ = this->create_wall_timer(1s, std::bind(&Pub::publish_msg, this));
}
void Pub::publish_msg()
{
auto msg = std_msgs::msg::String();
msg.data = "Hello World: " + std::to_string(count_++);
RCLCPP_INFO(this->get_logger(), "Published message: '%s'", msg.data.c_str());
pub_->publish(msg);
}
